import importlib
from collections.abc import Callable
from typing import Any

import pytest

from cli.utils.puzzle import run_puzzle_func

EXPECTED_RESULTS: dict[int, list[tuple[int, tuple[int | str, int | str]]]] = {
    2024: [
        (1, (1873376, 18997088)),
        (2, (224, 293)),
        (3, (190604937, 82857512)),
        (4, (2571, 1992)),
        (5, (4959, 4655)),
        (6, (4903, 1911)),
        (7, (3312271365652, 509463489296712)),
        (8, (271, 994)),
        (9, (6332189866718, 6353648390778)),
        (10, (468, 966)),
        (11, (203609, 240954878211138)),
        (12, (1359028, 839780)),
        (13, (32026, 89013607072065)),
        (14, (221142636, 7916)),
        (15, (1509074, 1521453)),
        (16, (108504, 538)),
        (17, ("7,0,3,1,2,6,3,7,1", 109020013201563)),
        (18, (314, "15,20")),
    ],
    2023: [
        (1, (54951, 55218)),
        (2, (2593, 54699)),
        (3, (550064, 85010461)),
        (4, (25651, 19499881)),
        (5, (196167384, 125742456)),
        (6, (449820, 42250895)),
        (7, (253954294, 254837398)),
        (8, (13301, 7309459565207)),
        (9, (1934898178, 1129)),
        (10, (6882, 491)),
        (11, (9543156, 625243292686)),
        (12, (7195, 33992866292225)),
        (13, (27300, 29276)),
        (14, (102497, 105008)),
        (15, (519603, 244342)),
        (16, (8125, 8489)),
        (17, (785, 922)),
        (18, (48652, 45757884535661)),
        (19, (325952, 125744206494820)),
        (20, (944750144, 222718819437131)),
        (21, (3847, 637537341306357)),
        (22, (475, 79144)),
        (23, (2134, 6298)),
        (24, (27328, 722976491652740)),
        (25, (582626, -1)),
    ],
    2022: [
        (1, (67633, 199628)),
        (2, (10624, 14060)),
        (3, (7817, 2444)),
        (4, (644, 926)),
        (5, ("FRDSQRRCD", "HRFTQVWNN")),
        (6, (1655, 2665)),
        (7, (1749646, 1498966)),
        (8, (1823, 211680)),
        (9, (6357, 2627)),
        (10, (15020, "EFUGLPAP")),
        (11, (50172, 11614682178)),
        (12, (528, 522)),
        (13, (6568, 19493)),
        (14, (961, 26375)),
        (15, (4873353, 11600823139120)),
        (16, (1915, 2772)),
        (17, (3168, 1554117647070)),
        (18, (4364, 2508)),
        (19, (2160, 13340)),
        (20, (5962, 9862431387256)),
        (21, (66174565793494, 3327575724809)),
        (22, (55244, 123149)),
        (23, (3917, 988)),
        (24, (326, 976)),
        (25, ("2=0--0---11--01=-100", -1)),
    ],
    2021: [
        (1, (1557, 1608)),
        (2, (1690020, 1408487760)),
        (3, (3687446, 4406844)),
        (4, (41503, 3178)),
        (5, (6283, 18864)),
        (6, (345793, 1572643095893)),
        (7, (349812, 99763899)),
        (8, (349, 1070957)),
        (9, (516, 1023660)),
        (10, (311949, 3042730309)),
        (11, (1721, 298)),
        (12, (4775, 152480)),
        (13, (785, -1)),
        (14, (3143, 4110215602456)),
        (15, (581, 2916)),
        (16, (938, 1495959086337)),
        (17, (7381, 3019)),
        (18, (3691, 4756)),
        (19, (367, 11925)),
        (20, (5498, 16014)),
        (21, (506466, 632979211251440)),
        (22, (561032, 1322825263376414)),
    ],
    2017: [
        (1, (1175, 1166)),
        (2, (21845, 191)),
        (3, (438, 266330)),
        (4, (451, 223)),
        (5, (373160, 26395586)),
        (6, (7864, 1695)),
        (7, ("rqwgj", 333)),
        (8, (6343, 7184)),
        (9, (17390, 7825)),
        (10, (4480, "c500ffe015c83b60fad2e4b7d59dabc4")),
        (11, (747, 1544)),
        (12, (288, 211)),
        (13, (1528, 3896406)),
        (14, (8230, 1103)),
        (15, (573, 294)),
        (16, ("jcobhadfnmpkglie", "pclhmengojfdkaib")),
        (17, (1311, 39170601)),
        (18, (3423, 7493)),
        (19, ("AYRPVMEGQ", 16408)),
        (20, (91, 567)),
        (21, (164, 2355110)),
        (22, (5460, 2511702)),
        (23, (9409, 913)),
        (24, (1868, 1841)),
    ],
    2016: [
        (1, (230, 154)),
        (2, ("61529", "C2C28")),
        (3, (869, 1544)),
        (4, (173787, 548)),
        (5, ("c6697b55", "8c35d1ab")),
        (6, ("ikerpcty", "uwpfaqrq")),
        (7, (115, 231)),
        (8, (106, "CFLELOYFCS")),
        (9, (112830, 10931789799)),
        (10, (93, 47101)),
        (11, (33, 57)),
        (12, (318117, 9227771)),
        (13, (96, 141)),
        (14, (15168, 20864)),
        (15, (376777, 3903937)),
        (16, (10011010010010010, 10101011110100011)),
        (17, ("RDURRDDLRD", 526)),
        (18, (1961, 20000795)),
        (19, (1834471, 1420064)),
        (20, (14975795, 101)),
        (21, ("fdhbcgea", "egfbcadh")),
        (22, (955, 246)),
        (23, (12516, 479009076)),
        (24, (412, 664)),
        (25, (192, -1)),
    ],
    2015: [
        (1, (74, 1795)),
        (2, (1606483, 3842356)),
        (3, (2081, 2341)),
        (4, (254575, 1038736)),
        (5, (236, 51)),
        (6, (569999, 17836115)),
        (7, (3176, 14710)),
        (8, (1350, 2085)),
        (9, (141, 736)),
        (10, (492982, 6989950)),
        (11, ("hepxxyzz", "heqaabcc")),
        (12, (119433, 68466)),
        (13, (618, 601)),
        (14, (2696, 1084)),
        (15, (13882464, 11171160)),
        (16, (213, 323)),
        (17, (1638, 17)),
        (18, (1061, 1006)),
        (19, (576, 207)),
        (20, (776160, 786240)),
        (21, (111, 188)),
        (22, (1824, 1937)),
        (23, (170, 247)),
        (24, (10439961859, 72050269)),
        (25, (2650453, -1)),
    ],
}

TEST_PARAMETERS = [
    pytest.param(year, puzzle_id, result, id=f"{year}-{puzzle_id:02d}")
    for year in EXPECTED_RESULTS
    for puzzle_id, result in EXPECTED_RESULTS[year]
]


def run_test(year: int, puzzle_name: str, func_name: str) -> int | str:
    file_name = f"{year}.{puzzle_name}.{puzzle_name}"
    module = importlib.import_module(file_name)
    func: Callable[[], int | str] = getattr(module, func_name)
    return func()


@pytest.mark.parametrize("year, puzzle_name, expected_result", TEST_PARAMETERS)
def test_puzzle(
    year: int,
    puzzle_name: int,
    expected_result: tuple[int | str, int | str],
) -> None:
    result = run_puzzle_func(year, puzzle_name, "main1")
    assert result == expected_result[0]

    result = run_puzzle_func(year, puzzle_name, "main2")
    assert result == expected_result[1]


@pytest.mark.parametrize("year, puzzle_name, expected_result", TEST_PARAMETERS)
@pytest.mark.parametrize("part", [1, 2])
@pytest.mark.benchmark
def test_benchmark(
    benchmark: Any, year: int, puzzle_name: str, expected_result: str, part: int
) -> None:
    benchmark(run_puzzle_func, year, puzzle_name, f"main{part}")
